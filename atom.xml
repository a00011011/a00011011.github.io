<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EvenYip&#39;s Notes</title>
  <subtitle>带着未知与怀疑，保持平静</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-22T14:19:30.479Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>叶爷</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>javascript的self和this</title>
    <link href="http://yoursite.com/2017/07/22/000%E3%80%90%E5%9D%91-es5%E3%80%91javascript%E7%9A%84self%E5%92%8Cthis/"/>
    <id>http://yoursite.com/2017/07/22/000【坑-es5】javascript的self和this/</id>
    <published>2017-07-22T13:58:31.000Z</published>
    <updated>2017-07-22T14:19:30.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="self"><a href="#self" class="headerlink" title="self"></a>self</h1><p>打开任何一个网页，浏览器会首先创建一个窗口，这个窗口就是一个window对象，也是js运行所依附的全局环境对象和全局作用域对象。self指窗口本身，它返回的对象跟window对象是一模一样的。</p>
<h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><p>c#有this关键字，它的主要作用就是指代当前对象实例（参数传递和索引器都要用到this）。在javascript中，this通常指向的是我们正在执行的函数本身，或者是指向该函数所属的对象（运行时）。</p>
<ol>
<li><p>不正确的方式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script type="text/javascript"&gt;</div><div class="line">function thisTest()&#123;</div><div class="line">    alert(this.value); // 弹出undefined, this在这里指向??</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;input id="btnTest" type="button" value="提交" onclick="thisTest()" /&gt;</div></pre></td></tr></table></figure>
<p>分析：onclick事件直接调用thisTest函数，程序就会弹出undefined。因为thisTest函数是在window对象中定义的，所以thisTest的拥有者（作用域）是window，thisTest的this也是window。而window是没有value属性的，所以就报错了。</p>
</li>
<li><p>正确的方式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> &lt;input id=<span class="string">"btnTest"</span> type=<span class="string">"button"</span> value=<span class="string">"提交"</span> /&gt;</div><div class="line"></div><div class="line">&lt;script type="text/javascript"&gt;</div><div class="line">function thisTest()&#123;</div><div class="line">    alert(this.value); </div><div class="line">&#125;   </div><div class="line">document.getElementById("btnTest").onclick=thisTest;                //给button的onclick事件注册一个函数</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;self&quot;&gt;&lt;a href=&quot;#self&quot; class=&quot;headerlink&quot; title=&quot;self&quot;&gt;&lt;/a&gt;self&lt;/h1&gt;&lt;p&gt;打开任何一个网页，浏览器会首先创建一个窗口，这个窗口就是一个window对象，也是js运行所依附的全局环境对象和全局作用域对
    
    </summary>
    
      <category term="项目中遇到的坑" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    
      <category term="ES5" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/ES5/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ES5" scheme="http://yoursite.com/tags/ES5/"/>
    
      <category term="this.self" scheme="http://yoursite.com/tags/this-self/"/>
    
  </entry>
  
  <entry>
    <title>三、函数</title>
    <link href="http://yoursite.com/2017/07/22/101%E3%80%90ES6-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E3%80%8B%E7%AC%94%E8%AE%B0%E3%80%91%E4%B8%89%E3%80%81%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/07/22/101【ES6-《深入理解ES6》笔记】三、函数/</id>
    <published>2017-07-22T13:42:26.000Z</published>
    <updated>2017-07-22T13:46:33.856Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数形参的默认值"><a href="#函数形参的默认值" class="headerlink" title="函数形参的默认值"></a>函数形参的默认值</h1><h2 id="在ES5中模拟默认参数"><a href="#在ES5中模拟默认参数" class="headerlink" title="在ES5中模拟默认参数"></a>在ES5中模拟默认参数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeRequest</span> (<span class="params">url, timeout, callback</span>) </span>&#123;</div><div class="line">    timeout = (<span class="keyword">typeof</span> timeout !== <span class="string">'undefined'</span>) ? timeout : <span class="number">2000</span></div><div class="line">    callback = (<span class="keyword">typeof</span> callback !== <span class="string">'undefined'</span>) ? callback : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">    </div><div class="line">    <span class="comment">// ....</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ES6中的默认参数值"><a href="#ES6中的默认参数值" class="headerlink" title="ES6中的默认参数值"></a>ES6中的默认参数值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">url, timeout = <span class="number">2000</span>, callback = function (</span>) </span>&#123;&#125;) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个函数中，只有第一个参数被认为是总要传入值，其他两个函数均有默认值，且不需要添加任何校验值是否缺失的代码，所以函数体会更小。</p>
<p>声明函数时，可以为任意参数指定默认值，在已指定默认值的参数后可以继续声明无参数默认值。如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">url, timeout = <span class="number">2000</span>, callback</span>) </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>只有不为第二个参数传入参数或者主动传入undefined时才会使用timeout的默认值。</strong><br><strong>对于默认参数值，null是合法值。传递null，值就为null</strong></p>
<h2 id="默认参数值对arguments对象的影响"><a href="#默认参数值对arguments对象的影响" class="headerlink" title="默认参数值对arguments对象的影响"></a>默认参数值对arguments对象的影响</h2><blockquote>
<p>arguments对象：传入的参数的集合</p>
</blockquote>
<p>在ES6中，如果一个函数使用了默认函数值，arguments对象的行为都将与ES5严格模式下保持一致。<br>默认参数值的存在使得arguments对象保持与命名参数分离。函数命名参数的变化不会对arguments对象产生影响。</p>
<h2 id="默认参数表达式（非原始值传参）"><a href="#默认参数表达式（非原始值传参）" class="headerlink" title="默认参数表达式（非原始值传参）"></a>默认参数表达式（非原始值传参）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="number">5</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">first, second = getValue(</span>)) </span>&#123;</div><div class="line">	<span class="keyword">return</span> first + second</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>))    <span class="comment">// 6</span></div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">1</span>))    <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意，当使用函数调用结果作为默认参数时，如果忘记加小括号，则最终传入的是对函数的引用，而不是函数调用结果。</p>
</blockquote>
<p>在引用参数默认值时，只允许引用前面参数的值，即先定义的参数不能访问后定义的参数。</p>
<h2 id="默认参数的临时死区"><a href="#默认参数的临时死区" class="headerlink" title="默认参数的临时死区"></a>默认参数的临时死区</h2><p>默认参数也有临时死区，在这里的参数不能访问。（所以引用临时死区的行为都会报错）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">first = second, second</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> first + second</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">1</span>))    <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(add(<span class="literal">undefined</span>, <span class="number">1</span>))    <span class="comment">// 抛出错误</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>函数参数有自己的作用域和临时死区，其与函数体的作用域是各自独立的，也就是说参数的默认值不可访问函数体内声明的变量。</p>
</blockquote>
<hr>
<h1 id="处理无命名参数"><a href="#处理无命名参数" class="headerlink" title="处理无命名参数"></a>处理无命名参数</h1><p>JavaScript的函数语法规定，无论函数已定义的命名参数有多少，都不限制调用时传入的实际参数数量，调用时总是可以传入任意数量的参数。</p>
<h2 id="ECMAScript5中的无命名参数"><a href="#ECMAScript5中的无命名参数" class="headerlink" title="ECMAScript5中的无命名参数"></a>ECMAScript5中的无命名参数</h2><p>js提供arguments对象来检查函数的所以参数，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">pick</span> (<span class="params">object</span>) </span>&#123;</div><div class="line">	<span class="keyword">let</span> result = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</div><div class="line"></div><div class="line">	<span class="comment">// 从第二个参数开始</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>, len = <span class="built_in">arguments</span>.length; i &lt; len; i++ ) &#123;</div><div class="line">    	result[<span class="built_in">arguments</span>[i]] = object[<span class="built_in">arguments</span>[i]]</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> result</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> book = &#123;</div><div class="line">	<span class="attr">title</span>: <span class="string">'es6'</span>,</div><div class="line">	<span class="attr">author</span>: <span class="string">'Zakas'</span>,</div><div class="line">	<span class="attr">year</span>: <span class="number">2016</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> bookData = pick(book, <span class="string">'author'</span>, <span class="string">'year'</span>)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(bookData.author)    <span class="comment">// Zakas</span></div><div class="line"><span class="built_in">console</span>.log(bookData.year)    <span class="comment">// 2016</span></div></pre></td></tr></table></figure></p>
<h2 id="不定参数"><a href="#不定参数" class="headerlink" title="不定参数"></a>不定参数</h2><p>在函数的命名参数前添加三个点(…)就表明这个是不定参数，该参数为一个数组，包含着自它之后传入的所有参数，通过这个数组名就可逐一访问里面的参数。如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">pick</span> (<span class="params">object, ...keys</span>) </span>&#123;</div><div class="line">	<span class="keyword">let</span> result = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</div><div class="line"></div><div class="line">	<span class="comment">// 从第二个参数开始</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = keys.length; i &lt; len; i++ ) &#123;</div><div class="line">    	result[keys[i]] = object[keys[i]]</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>函数的length属性统计的是函数命名参数的数量，不定参数的加入不会影响length属性的值。</p>
</blockquote>
<h3 id="不定参数的使用限制"><a href="#不定参数的使用限制" class="headerlink" title="不定参数的使用限制"></a>不定参数的使用限制</h3><ol>
<li>每个函数最多只能声明一个不定参数，而且一定放在所有参数的末尾</li>
<li>不定参数不能用于对象字面量setter之中，如：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> object = &#123;</div><div class="line">    <span class="comment">// Uncaught SyntaxError: Setter function argument must not be a rest parameter</span></div><div class="line">    set name (...value) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>原因： 对象字母量setter的参数有且只能有一个参数。</p>
<h3 id="不定参数对arguments对象的影响"><a href="#不定参数对arguments对象的影响" class="headerlink" title="不定参数对arguments对象的影响"></a>不定参数对arguments对象的影响</h3><p>无论是否使用不定参数，arguments对象总是包含所有传入函数的参数。</p>
<h1 id="增强的Function构造函数"><a href="#增强的Function构造函数" class="headerlink" title="增强的Function构造函数"></a>增强的Function构造函数</h1><p>常用来动态创建新的函数</p>
<p>ECMAScript6增强了Function构造函数的功能，支持在创建函数时定义默认参数和不定参数。如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'frist'</span>, <span class="string">'second = first'</span>, <span class="string">'return first + second'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> pickFirst = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'...args'</span>, <span class="string">'return args[0]'</span>)</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h1><p>向Math.max()方法传入一个数组再在数组前添加不定参数中使用的…符号，就无须再调用apply方法了。JavaScript引擎读取这段程序后会将<strong>数组分割为各自独立的参数病依次传入</strong>，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> values = [<span class="number">25</span>, <span class="number">50</span>, <span class="number">75</span>, <span class="number">100</span>]</div><div class="line"></div><div class="line"><span class="comment">// 等价于</span></div><div class="line"><span class="comment">// console.log(Math.max(25, 50, 75, 100))    // 100</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(...values))    <span class="comment">// 100</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(values))    <span class="comment">// NaN</span></div></pre></td></tr></table></figure></p>
<p>可以将展开运算符与其他正常传入的参数混合使用。如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> values = [<span class="number">-25</span>, <span class="number">-50</span>, <span class="number">-75</span>, <span class="number">-100</span>]</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(...values, <span class="number">0</span>))    <span class="comment">// 0</span></div></pre></td></tr></table></figure></p>
<hr>
<h1 id="函数的name属性"><a href="#函数的name属性" class="headerlink" title="函数的name属性"></a>函数的name属性</h1><p>调试时辨别函数(只是协助调试的额外信息，所以不能使用name属性来获取对于函数的引用)</p>
<h2 id="如何选择合适的名称"><a href="#如何选择合适的名称" class="headerlink" title="如何选择合适的名称"></a>如何选择合适的名称</h2><p>EMCAScript6程序中所有函数的name属性都有一个合适的值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// ---</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> doAnotherThing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// ---</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(doSomething.name)    <span class="comment">// doSomething</span></div><div class="line"><span class="built_in">console</span>.log(doAnotherThing.name)    <span class="comment">// doAnotherThing</span></div></pre></td></tr></table></figure></p>
<ol>
<li>声明时函数的名称</li>
<li>被赋值为该匿名函数的变量的名称</li>
<li><h2 id="name属性的特殊情况"><a href="#name属性的特殊情况" class="headerlink" title="name属性的特殊情况"></a>name属性的特殊情况</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> doSomeThing = <span class="function"><span class="keyword">function</span> <span class="title">doSomeThingElse</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// ---</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">    get firstName() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'abc'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(doSomeThing.name)    <span class="comment">// 'doSomeThing'</span></div><div class="line"><span class="built_in">console</span>.log(person.sayName.name)    <span class="comment">// 'sayName'</span></div><div class="line"><span class="built_in">console</span>.log(person.firstName.name)    <span class="comment">// 'get firstName'（浏览器报undefined）原因：person.firstName为'abc'，没有name属性</span></div><div class="line"><span class="comment">// 要这样检测才对</span></div><div class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(person, <span class="string">'firstName'</span>).get.name    <span class="comment">// "get firstName"</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>还有两个特例：</p>
<ol>
<li>通过bind()函数创建的函数，其名称都带有’bound’前缀</li>
<li>通过Function构造函数创建的函数，其名称都带有’anonymous’前缀<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> doSomething = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// ---</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(doSomething.bind().name)    <span class="comment">// 'bound doSomething'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Function</span>().name)    <span class="comment">// 'anonymous'</span></div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h1 id="明确函数的多重用途"><a href="#明确函数的多重用途" class="headerlink" title="明确函数的多重用途"></a>明确函数的多重用途</h1><p>JavaScript函数有两个不同的内部方法：[[Call]]和[[Construct]]。当通过new关键字调用函数时，执行的是[[Construct]]函数。、，它负责创建一个通常被称为实例的新对象，然后再执行函数体，将this绑定到实例上；如果不通过new关键字调用函数，则执行[[Call]]函数，从而直接执行代码中的函数体。具有[[Construct]]的函数被统称为构造函数。<br>**切记：不是所有函数都有[[Construct]]方法，因此不是所有函数都可以用new来调用，如箭头函数。</p>
<h2 id="原属性（Metaproperty）-new-target"><a href="#原属性（Metaproperty）-new-target" class="headerlink" title="原属性（Metaproperty） new.target"></a>原属性（Metaproperty） new.target</h2><p>为了解决判断函数是否通过new关键字调用的问题，ES6引入了new.target这个元属性。元属性是指非对象的属性，其可以提供非对象目标的补充信息（如new）。<br>当调用函数的[[Construct]方法时，new.target被赋值为new操作符的目标，通常是新创建对象实例，也就是函数体内this的构造函数；如果调用[[Call]]方法，则new.target的值为undefined。</p>
<p>检测一个函数是否通过new关键字调用的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">new</span>.target !== <span class="string">'undefined'</span>) &#123;</div><div class="line">    <span class="comment">// 或者</span></div><div class="line">    <span class="comment">// if (typeof new.target === Person) &#123;</span></div><div class="line">        <span class="keyword">this</span>.name = name</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'必须通过new关键字来调用Person。'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'Even'</span>)</div><div class="line"><span class="keyword">var</span> notAPerson = Person.call(person, <span class="string">'jack'</span>)    <span class="comment">// Uncaught Error: 必须通过new关键字来调用Person。</span></div></pre></td></tr></table></figure></p>
<p><strong>在函数外使用new.target是一个语法错误。</strong></p>
<hr>
<h1 id="块级函数"><a href="#块级函数" class="headerlink" title="块级函数"></a>块级函数</h1><p>ES5中的严格模式中引入了一个错误提示，当在代码块内部声明函数时会抛出错误：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">    </div><div class="line">    <span class="comment">// 在ES5中抛出语法错误，在ES6中不报错</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 空函数</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在ES6中，会将doSomething视作一个块级声明，从而可以在定义该函数的代码块内部访问和调用它。如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> doSomething)    <span class="comment">// 'function'</span></div><div class="line">    </div><div class="line">    <span class="comment">// 在ES5中抛出语法错误，在ES6中不报错</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 空函数</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    doSomething()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> doSomething) <span class="comment">// 'undefined'</span></div></pre></td></tr></table></figure></p>
<p>在定义函数的代码块内，块级函数会被提升至顶部，所以typeof doSomething 的值为’function’，这也佐证了，即使在函数定义前使用它，还是能返回正确的值；<br>但是一旦if语句代码块结束执行，doSomething()函数将不再存在。</p>
<h2 id="块级函数的使用场景"><a href="#块级函数的使用场景" class="headerlink" title="块级函数的使用场景"></a>块级函数的使用场景</h2><p>块级函数与let函数表达式类似，一旦执行过程流出了代码块，函数定义立即被移除。二者的区别是，在该代码块中，块级函数会被提升至块的顶部，二let定义的函数表达式不会被提升。如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> doSomething)    <span class="comment">// Uncaught ReferenceError: doSomething is not defined</span></div><div class="line">    </div><div class="line">    <span class="keyword">let</span> doSomething = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 空函数</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    doSomething()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> doSomething) <span class="comment">// 'undefined'</span></div></pre></td></tr></table></figure></p>
<p><strong>需要函数提升至代码块的顶部，则选择块级函数；如果不需要，则选择let表达式。</strong></p>
<h2 id="非严格模式下的块级函数"><a href="#非严格模式下的块级函数" class="headerlink" title="非严格模式下的块级函数"></a>非严格模式下的块级函数</h2><p>在ES6中，即使非严格模式下，也可以声明块级函数，但是和严格模式下稍有不同。这些函数不再被提升至代码块的顶部，而是提升到外围函数或全局作用域的顶部。<br>所有ES6的运行时环境都将执行这一标准。</p>
<hr>
<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>在ES中，箭头函数是其中最有趣的新增特性，它与传统的JavaScript函数有些许不同：</p>
<ul>
<li><strong>没有this、super、arguments和new.target绑定</strong> 箭头函数中的this、super、arguments和new.target由外围最近一层非箭头函数决定。</li>
<li><strong>不能通过new关键字调用</strong>  箭头函数没有[[Construct]]方法，所以不能用作构造函数，如果通过new关键字调用箭头函数，程序会抛出错误。</li>
<li><strong>没有原型</strong>  由于不可以通过new关键字调用箭头函数，因而没有构建原型的需求，所以箭头函数不存在property这个属性。</li>
<li><strong>不可以改变this的绑定</strong>  函数内部的this值不可被改变，在函数的生命周期内始终保持一致。</li>
<li><strong>不支持arguments属性</strong>  箭头函数没有arguments绑定，所以必须通过命名参数和不定参数这两种形式访问函数的参数。</li>
<li><strong>不支持重复的命名参数</strong>  在传统函数的规定中，只有严格模式下才不能有重复的命名参数。</li>
</ul>
<p>原因：</p>
<ol>
<li>this绑定在js程序中是常见的错误来源，在函数内很容易对this的值失去控制</li>
<li>限制箭头函数的this值，简化代码执行的过程，有利于JavaScript引擎优化这些操作</li>
</ol>
<h2 id="箭头函数语法"><a href="#箭头函数语法" class="headerlink" title="箭头函数语法"></a>箭头函数语法</h2><p>箭头函数语法多变，根据实际的使用场景有多重形式。所有变种都由函数参数、箭头、函数体组成。</p>
<p><strong>当箭头函数只有一个参数时，可以直接写参数名，箭头紧随其后，箭头右侧的表达式被求值后便立即返回，即使没有显式的返回语句。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> feflect = <span class="function"><span class="params">value</span> =&gt;</span> value</div><div class="line"></div><div class="line"><span class="comment">// 实际上相当于</span></div><div class="line"><span class="keyword">let</span> feflect = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> value</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>传入两个或两个以上的参数，要在参数的两侧添加一堆小括号。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2</div><div class="line"></div><div class="line"><span class="comment">// 实际上相当于</span></div><div class="line"><span class="keyword">let</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> num1 + num2</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>函数没有参数，也要在声明的时候写一组没有内容的小括号</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> gatName = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'Even'</span></div><div class="line"></div><div class="line"><span class="comment">// 实际上相当于</span></div><div class="line"><span class="keyword">let</span> gatName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'Even'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>为函数编写由多个表达式组成的更传统的函数体，那么需要用或括号包裹函数体，并显式地定义一个返回值</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> &#123;</div><div class="line">    num1 + num2</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 实际上相当于</span></div><div class="line"><span class="keyword">let</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> num1 + num2</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>创建空函数，需要写一对没有内容的花括号</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> doNothing = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// 实际上相当于</span></div><div class="line"><span class="keyword">let</span> doNothing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div></pre></td></tr></table></figure></p>
<p><strong>如果想在箭头函数外返回一个对象字面量，则需要将改字面量包裹在小括号内</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> getTempItem = <span class="function"><span class="params">id</span> =&gt;</span> (&#123; <span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">'temp'</span>&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 实际上相当于</span></div><div class="line"><span class="keyword">let</span> getTempItem = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">id</span>: id,</div><div class="line">        <span class="attr">name</span>: <span class="string">'name'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>将对象字面量包裹在小括号中是为了将其与函数体区分开。</p>
<h2 id="创建立即执行函数表达式"><a href="#创建立即执行函数表达式" class="headerlink" title="创建立即执行函数表达式"></a>创建立即执行函数表达式</h2><p>定义一个匿名函数并立即调用，自始至终不保存对改对象的引用。创建一个与其他程序隔离的作用域。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">getName</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> name</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;(<span class="string">'Even'</span>)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(person.getName())    <span class="comment">// 'Even'</span></div></pre></td></tr></table></figure>
<p>ES6中只要将箭头函数包裹在小括号中，就可以实现相同的功能：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> person = <span class="function">(<span class="params">(name</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">getName</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> name</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)(<span class="string">'Even'</span>)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(person.getName())    <span class="comment">// 'Even'</span></div></pre></td></tr></table></figure></p>
<h2 id="箭头函数没有this绑定"><a href="#箭头函数没有this绑定" class="headerlink" title="箭头函数没有this绑定"></a>箭头函数没有this绑定</h2><ul>
<li>箭头函数中没有this绑定，必须通过查找作用域链来决定其值。如果箭头函数被非箭头函数包含，则this绑定的是最近一层非箭头函数的this；否则this的值被设置为undefined。</li>
<li>箭头函数缺少正常函数所拥有的prototype属性，它的设计初衷是“即用即弃”，所以不能用它来定义新的类型。如果尝试用new关键字调用一个箭头函数，会导致程序抛出错误。</li>
<li>箭头函数的this取决于该函数外部箭头函数的this值，且不能通过call()、apply()、bind()方法改变this的值。</li>
</ul>
<h2 id="箭头函数和数组"><a href="#箭头函数和数组" class="headerlink" title="箭头函数和数组"></a>箭头函数和数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = values.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)    <span class="comment">// 排序</span></div></pre></td></tr></table></figure>
<p>诸如sort()、map()、reduce()这些可以接受回掉函数的数组方法，都可以通过箭头函数语法简化编码过程并减少编码量。</p>
<h2 id="箭头函数没有arguments对象"><a href="#箭头函数没有arguments对象" class="headerlink" title="箭头函数没有arguments对象"></a>箭头函数没有arguments对象</h2><p>箭头函数没有自己的arguments对象，且未来无论函数在哪个上下文中执行，箭头函数始终可以访问外围函数的arguments对象。</p>
<h2 id="箭头函数的辨别"><a href="#箭头函数的辨别" class="headerlink" title="箭头函数的辨别"></a>箭头函数的辨别</h2><p>尽管箭头函数与传统函数的语法不同，但它同样可以被识别出来。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> comparator = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a-b</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> comparator)    <span class="comment">// 'function'</span></div><div class="line"><span class="built_in">console</span>.log(comparator <span class="keyword">instanceof</span> <span class="built_in">Function</span>)    <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<hr>
<h1 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h1><p>尾调用指的是函数作为另一个函数的最后一条语句被调用。如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> doSomethingElse()    <span class="comment">// 尾调用</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在ES5引擎中，尾调用的实现与其他函数调用的实现类似：创建一个新的栈帧（stack frame），将其推入调用栈来表示函数调用。也就是说，在循环环境中，每一个未用完的栈帧都会保存在内存中，当调用栈变得过大时会造成程序问题。</p>
<h2 id="EMCAScript6中尾调用优化"><a href="#EMCAScript6中尾调用优化" class="headerlink" title="EMCAScript6中尾调用优化"></a>EMCAScript6中尾调用优化</h2><p>EMCAScript6缩短了严格模式下调用栈的大小（非严格模式下不收影响），如果满足以下条件，尾调用不再创建新的栈帧，而是清除并重用当前栈帧：</p>
<ul>
<li>尾调用不访问当前栈帧的变量（也就是说函数不是一个闭包）</li>
<li>在函数内部，尾调用是最后一条语句</li>
<li>尾调用的结果作为函数值返回</li>
</ul>
<h2 id="如何利用尾调用优化"><a href="#如何利用尾调用优化" class="headerlink" title="如何利用尾调用优化"></a>如何利用尾调用优化</h2><p>尾调用优化发生在引擎背后，除非尝试优化这个函数，否则无须考虑此类问题。递归函数是最主要的应用场景，此时尾调用优化效果最显著。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;函数形参的默认值&quot;&gt;&lt;a href=&quot;#函数形参的默认值&quot; class=&quot;headerlink&quot; title=&quot;函数形参的默认值&quot;&gt;&lt;/a&gt;函数形参的默认值&lt;/h1&gt;&lt;h2 id=&quot;在ES5中模拟默认参数&quot;&gt;&lt;a href=&quot;#在ES5中模拟默认参数&quot; class
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="ECMAScript2015" scheme="http://yoursite.com/categories/JavaScript/ECMAScript2015/"/>
    
      <category term="《深入理解ES6》笔记" scheme="http://yoursite.com/categories/JavaScript/ECMAScript2015/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="ECMAScript2015" scheme="http://yoursite.com/tags/ECMAScript2015/"/>
    
      <category term="《深入理解ES6》笔记" scheme="http://yoursite.com/tags/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>二、字符串和正则表达式</title>
    <link href="http://yoursite.com/2017/07/17/101%E3%80%90ES6-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E3%80%8B%E7%AC%94%E8%AE%B0%E3%80%91%E4%BA%8C%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/07/17/101【ES6-《深入理解ES6》笔记】二、字符串和正则表达式/</id>
    <published>2017-07-17T15:31:33.000Z</published>
    <updated>2017-07-17T17:37:34.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="更好的Unicode支持"><a href="#更好的Unicode支持" class="headerlink" title="更好的Unicode支持"></a>更好的Unicode支持</h1><h2 id="UTF-16码位"><a href="#UTF-16码位" class="headerlink" title="UTF-16码位"></a>UTF-16码位</h2><ul>
<li>UTF-16引入了代理对（surrogate pair），其规定用两个16位编码单元表示一个码位。也就是说，字符串里的字符有两种，一种是由一个编码单元16位表示的BMP字符，一种是由两个编码单元32位表示的辅助平面字符。</li>
<li>ES6强制使用UTF-16字符串编码，并按照这种字符编码来标准化字符串操作，在JavaScript中增加了专门针对代理对的功能。</li>
</ul>
<h2 id="codePointAt-方法"><a href="#codePointAt-方法" class="headerlink" title="codePointAt()方法"></a>codePointAt()方法</h2><p>codePointAt()方法接受编码单元的位置而非字符串的位置作为参数，返回与字符串中给定位置对应的<strong>码位</strong>，既一个整数值。</p>
<p>对于BMP字符集中的字符，codePointAt()和charCodeAt()方法的相同，而对于非BMP字符集来说返回值则不同。charCodeAt()方法返回的只是位置0处的第一个编码单元，而codePointAt()返回完整的码位，即使这个码位包含多个编码单元。</p>
<p>要检测一个字符占用的编码单元数量，最简单的方法是调用字符的codePointAt()方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">is32Bit</span>(<span class="params">c</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> c.codePointAt(c) &gt; <span class="number">0xFFFF</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span>)    <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>用16位表示的字符集上界为十六进制FFFF，所以超过这个上界的码位一定由两个编码单元来表示，总共32位。</p>
</blockquote>
<h2 id="String-fromCodePoint-方法"><a href="#String-fromCodePoint-方法" class="headerlink" title="String.fromCodePoint()方法"></a>String.fromCodePoint()方法</h2><p>String.fromCodePoint()方法根据指定的码位生成一个字符：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCodePoint(<span class="number">134071</span>))    <span class="comment">// '𠮷'</span></div></pre></td></tr></table></figure></p>
<p>可以将String.fromCodePoint()看成是完整版的String.fromCharCode()。对应BMP中所有的字符，两方法执行结果相同。只有传递非BMP字符的码位作为参数，二者的执行结果才有可能不同。</p>
<h2 id="normalize-方法（国际化应用中常使用）"><a href="#normalize-方法（国际化应用中常使用）" class="headerlink" title="normalize()方法（国际化应用中常使用）"></a>normalize()方法（国际化应用中常使用）</h2><p>normalize()方法提供Unicode的标准化形式：</p>
<ol>
<li>以标准等价方式分解，然后以标准等价方式重组(‘NFC’),默认选项。</li>
<li>以标准等价方式分解(‘NFD’)。</li>
<li>以兼容等价方式分解(‘NFKC’)。</li>
<li>以兼容等价方式分解，然后以标准等价方式重组(‘NFKD’)。</li>
</ol>
<p><strong>需牢记：在对比字符串之前，一定要先把它们标准化为同一种形式:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> normalized = values.map(<span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">    retrun text.normalize()</div><div class="line">&#125;)</div><div class="line"></div><div class="line">nomralized.sort(funtion(first, second) &#123;</div><div class="line">    <span class="keyword">if</span> (first &lt; second) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (first === second) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>如果相对原始数组进行排序，可以在比较函数中添加normalize()方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">values.sort(funtion(first, second) &#123;</div><div class="line">    <span class="keyword">let</span> firstNormalized = first.normalize(),</div><div class="line">        secondNormalized = second.normalize()</div><div class="line">        </div><div class="line">    <span class="keyword">if</span> (firstNormalized &lt; secondNormalized) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstNormalized === secondNormalized) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="正则表达式u修饰符"><a href="#正则表达式u修饰符" class="headerlink" title="正则表达式u修饰符"></a>正则表达式u修饰符</h2><p>解决默认将字符串中的每个字符按照16位编码单元处理的问题。</p>
<h3 id="u修饰符实例"><a href="#u修饰符实例" class="headerlink" title="u修饰符实例"></a>u修饰符实例</h3><p>当一个正则表达式添加了u修饰符时，它就从编码单元操作模式切换为字符模式，如此一来正则表达式就不会视代理对为两个字符。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> text = <span class="string">'𠮷'</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(text.length)    <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log(<span class="regexp">/^.$/</span>.test(text))    <span class="comment">// false /^.$/匹配所有单字符字符串，'𠮷'由两个编码单元组成</span></div><div class="line"><span class="built_in">console</span>.log(<span class="regexp">/^.$/u</span>.test(text))    <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="计算码位数量"><a href="#计算码位数量" class="headerlink" title="计算码位数量"></a>计算码位数量</h3><p>es6检测字符串的length属性仍然返回字符串编码单元的数量。可以通过正则表达式的u修饰符来解决：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">codePointlength</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">	<span class="keyword">let</span> result = text.match(<span class="regexp">/[\s\S]/gu</span>)</div><div class="line">	<span class="keyword">return</span> result ? result.length : <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(codePointlength(<span class="string">'abc'</span>))    <span class="comment">// 3</span></div><div class="line"><span class="built_in">console</span>.log(codePointlength(<span class="string">'𠮷bc'</span>))    <span class="comment">// 3</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>此方法有效，但运行效率低（可以通过字符串迭代器来解决）</p>
</blockquote>
<h3 id="检测u修饰符支持"><a href="#检测u修饰符支持" class="headerlink" title="检测u修饰符支持"></a>检测u修饰符支持</h3><p>检测当前浏览器是否支持u修饰符，最安全的方式是通过以下函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasRegExpU</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">var</span> pattern = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'.'</span>, <span class="string">'u'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="其他字符串变更"><a href="#其他字符串变更" class="headerlink" title="其他字符串变更"></a>其他字符串变更</h1><h2 id="字符串中的子串识别"><a href="#字符串中的子串识别" class="headerlink" title="字符串中的子串识别"></a>字符串中的子串识别</h2><p><strong>indexOf()拓展：</strong></p>
<ul>
<li>includes()方法，如果在字符串中检测到指定文本则返回true，否则返回false</li>
<li>startsWith()方法，从字符串起始位置检测</li>
<li>endsWith()方法，从字符串结束部分检测</li>
</ul>
<p>以上3个方法都接收两个参数==&gt; (‘要搜索的文本’, ‘开始搜索的位置的索引’)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> msg = <span class="string">'Hello World!'</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(msg.startsWith(<span class="string">'Hello'</span>))    <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(msg.endsWith(<span class="string">'!'</span>))    <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(msg.includes(<span class="string">'o'</span>))    <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(msg.startsWith(<span class="string">'o'</span>))    <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(msg.endsWith(<span class="string">'World!'</span>))    <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(msg.includes(<span class="string">'x'</span>))    <span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(msg.startsWith(<span class="string">'o'</span>, <span class="number">4</span>))    <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(msg.endsWith(<span class="string">'o'</span>, <span class="number">8</span>))    <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(msg.includes(<span class="string">'o'</span>, <span class="number">8</span>))    <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>这三个方法如果没有按照要求传入字符串，而是传入正则表达式，会触发错误。indexOf()和lastIndexOf()则不会,它们会把传入的正则表达式当作字符串并搜索它。</p>
</blockquote>
<h3 id="repeat-方法"><a href="#repeat-方法" class="headerlink" title="repeat()方法"></a>repeat()方法</h3><p>repeat()方法接受一个number类型的参数，表示字符串重复的次数，返回值是当前字符串重复一定次数的新字符串。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 缩进指定数量的空格</span></div><div class="line"><span class="keyword">let</span> indent = <span class="string">' '</span>.repeat(<span class="number">4</span>),</div><div class="line">	indentLevel = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment">// 当需要增加缩进时</span></div><div class="line"><span class="keyword">let</span> newIndent = indent.repeat(++indentLevel)</div></pre></td></tr></table></figure>
<h1 id="其他正则表达式语法变更"><a href="#其他正则表达式语法变更" class="headerlink" title="其他正则表达式语法变更"></a>其他正则表达式语法变更</h1><h2 id="正则表达式y修饰符"><a href="#正则表达式y修饰符" class="headerlink" title="正则表达式y修饰符"></a>正则表达式y修饰符</h2><p>y修饰符会影响正则表达式的搜索过程中的sticky属性，当在字符串中开始字符匹配时，它会通知搜索从正则表达式的lastIndex属性开始进行，如果在指定位置没能成功匹配，则停止继续匹配。<br>记住两点：</p>
<ol>
<li>只有调用exec()和test()这些正则表达式对象的方法时才会涉及lastIndex属性；</li>
<li>调用字符串方法，如match()，不会触发粘滞行为。</li>
</ol>
<p><strong>检测y修饰符是否存在（通过属性名来检测）：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> pattern = <span class="regexp">/hello\d/y</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(pattern.sticky)    <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p><strong>检测引擎的支持程度：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasRegExpY</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">var</span> pattern = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'.'</span>, <span class="string">'y'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">hasRegExpY()</div></pre></td></tr></table></figure></p>
<h2 id="正则表达式的复制"><a href="#正则表达式的复制" class="headerlink" title="正则表达式的复制"></a>正则表达式的复制</h2><p>es5中通过给RegExp构造函数传递正则表达式作为参数来复制这个正则表达式，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> re1 = <span class="regexp">/ab/i</span></div><div class="line">    re2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(re1)</div></pre></td></tr></table></figure></p>
<p>但是给RegExp构造函数提供第二个参数，为正则表达式指定一个修饰符，则代码无法运行：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> re1 = <span class="regexp">/ab/i</span></div><div class="line"></div><div class="line">    <span class="comment">// es5中抛出错误，es6中正常</span></div><div class="line">    re2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(re1, <span class="string">'g'</span>)    <span class="comment">// es6中第二个参数修改第一个参数的修饰符</span></div></pre></td></tr></table></figure></p>
<h2 id="flags属性"><a href="#flags属性" class="headerlink" title="flags属性"></a>flags属性</h2><p>ES6中用来获取正则表达式的修饰符<br>ES5和ES6中通过source属性获取正则表达式的文本</p>
<p>ES5中这样获取：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlags</span>(<span class="params">re</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> text = re.toString()</div><div class="line">    <span class="keyword">return</span> text.substring(text.lastIndexOf(<span class="string">'/'</span>)+<span class="number">1</span>, text.length)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> re = <span class="regexp">/ab/g</span></div><div class="line"><span class="built_in">console</span>.log(getFlags(re))    <span class="comment">// 'g'</span></div></pre></td></tr></table></figure></p>
<p>flags属性和source属性都是<strong>只读的原型属性访问器</strong>，对齐只设置了getter方法。访问flags属性会返回所有应用于当前正则表达式的修饰符字符串。如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> re = <span class="regexp">/ab/g</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(re.source)    <span class="comment">// 'ab'</span></div><div class="line"><span class="built_in">console</span>.log(re.flags)    <span class="comment">// 'g'</span></div></pre></td></tr></table></figure></p>
<h2 id="模板字面量"><a href="#模板字面量" class="headerlink" title="模板字面量"></a>模板字面量</h2><p>ES6模板字面量语法支持创建专用领域语言（DSL,是与JavaScript概念相反的编程语言，通常是指某些具体且有限的目标设计的语言)。</p>
<blockquote>
<p>模板字面量是拓展ECMAScript基础语法的语法糖，其提供一套生成、查询并操作来自其他语言里的内容的DSL，且可以免受注入攻击。</p>
</blockquote>
<p>新特性：</p>
<ol>
<li>多行字符串</li>
<li>基本的字符串格式化（将变量的值嵌入字符串的能力）</li>
<li>HTML转义（向HTML插入经过安全转换后的字符串的能力）</li>
</ol>
<h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><ul>
<li>用反撇号（`）替换单、双引号</li>
<li>在字符串中使用反撇号，要用反斜杠（\）将其转义</li>
<li>在模板字面量中，不需要转义单、双引号</li>
</ul>
<h3 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h3><p>在ES6之前，通常依靠数组或字符串拼接的方法来创建多行字符串，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> message = [</div><div class="line">    <span class="string">'Multiline '</span>,</div><div class="line">    <span class="string">'string'</span></div><div class="line">].join(<span class="string">'\n'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 或者</span></div><div class="line"><span class="keyword">let</span> message = <span class="string">'Multiline \n'</span> + </div><div class="line">    <span class="string">'string'</span></div></pre></td></tr></table></figure></p>
<h3 id="简化多行字符串"><a href="#简化多行字符串" class="headerlink" title="简化多行字符串"></a>简化多行字符串</h3><ul>
<li>需要在字符串中添加新的一行，只需在代码中直接换行</li>
<li><p>在反撇号中所有的空白符都属于字符串的一部分，所以要千万小心缩进。如果要通过适当的缩进来对齐文本，可以考虑在多行模板字面量的第一行留白，并在后面几行中缩进。如:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> html = <span class="string">`</span></div><div class="line">&lt;div&gt;</div><div class="line">    &lt;h1&gt;Title&lt;/h1&gt;</div><div class="line">&lt;/div&gt;`.trim()</div></pre></td></tr></table></figure>
</li>
<li><p>也可以在模板字面量中显式的使用\n,来指明插入新行的位置</p>
</li>
<li><h3 id="标签模板"><a href="#标签模板" class="headerlink" title="标签模板"></a>标签模板</h3>标签指在模板字面量第一个反撇号（`）前方标注的字符串：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> message = tag<span class="string">`Hello World`</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>在这个示例中，应用于模板字面量<code>Hello World</code>的模板标签是tag。</p>
<h4 id="定义标签"><a href="#定义标签" class="headerlink" title="定义标签"></a>定义标签</h4><p>标签可以是一个函数，调用时传入加工过的模板字面量各部分数据，但必须结合每个部分来创建结果。第一个参数是一个数组，包含JavaScript解释过后的<strong>字面量字符串</strong>，第一个参数后的所以参数都是每一个<strong>占位符的解释值</strong>。</p>
<p>标签函数通常使用不定参数特性来定义占位符，从而简化数据处理的过程，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span> (<span class="params">literals, ...substitutions</span>) </span>&#123;</div><div class="line">    <span class="comment">// 返回一个字符串</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>literals[0]总是字符串的始端，literals[literals.length - 1]总是字符串的结尾。这样，substitutions的数量总比literals的数量少一个，也意味着substitutions.length === literals.length-1总为true。、</p>
<p>模拟模板字面量的默认行为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">passthru</span> (<span class="params">literals, substitutions</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> result = <span class="string">''</span></div><div class="line">    </div><div class="line">    <span class="comment">// 根据substitutions的数量来确定循环的执行次数(用literals常会越界)</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; substitutions.length; i++) &#123;</div><div class="line">        result += literals[i]</div><div class="line">        result += substitutions[i]</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 合并最后一个literal</span></div><div class="line">    result += literals[literals.length - <span class="number">1</span>]</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> count = <span class="number">10</span>,</div><div class="line">    price = <span class="number">0.25</span></div><div class="line">    message = passthru<span class="string">`<span class="subst">$&#123;count&#125;</span> items cost $<span class="subst">$&#123;(count*price).toFixed(<span class="number">2</span>)&#125;</span>.`</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(message)    <span class="comment">// '10 items cost $2.50.'</span></div></pre></td></tr></table></figure></p>
<h4 id="在模板字面量中使用原始值"><a href="#在模板字面量中使用原始值" class="headerlink" title="在模板字面量中使用原始值"></a>在模板字面量中使用原始值</h4><p>通过模板标签可以访问到原生字符串信息（转换之前的原生字符串），最简单的方法是使用内建的String.row标签：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> message1 = <span class="string">`Multiline\nstring`</span></div><div class="line">    message2 = <span class="built_in">String</span>.row<span class="string">`Multiline\nstring`</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(message1)    <span class="comment">// 'Multiline</span></div><div class="line">                         <span class="comment">// string'</span></div><div class="line"><span class="built_in">console</span>.log(message2)    <span class="comment">// 'Multiline\nstring'</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;更好的Unicode支持&quot;&gt;&lt;a href=&quot;#更好的Unicode支持&quot; class=&quot;headerlink&quot; title=&quot;更好的Unicode支持&quot;&gt;&lt;/a&gt;更好的Unicode支持&lt;/h1&gt;&lt;h2 id=&quot;UTF-16码位&quot;&gt;&lt;a href=&quot;#UTF-1
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="ECMAScript2015" scheme="http://yoursite.com/categories/JavaScript/ECMAScript2015/"/>
    
      <category term="《深入理解ES6》笔记" scheme="http://yoursite.com/categories/JavaScript/ECMAScript2015/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="ECMAScript2015" scheme="http://yoursite.com/tags/ECMAScript2015/"/>
    
      <category term="《深入理解ES6》笔记" scheme="http://yoursite.com/tags/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>一、块级作用域绑定</title>
    <link href="http://yoursite.com/2017/07/16/101%E3%80%90ES6-%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E3%80%8B%E7%AC%94%E8%AE%B0%E3%80%91%E4%B8%80%E3%80%81%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%BB%91%E5%AE%9A/"/>
    <id>http://yoursite.com/2017/07/16/101【ES6-《深入理解ES6》笔记】一、块级作用域绑定/</id>
    <published>2017-07-16T07:05:58.000Z</published>
    <updated>2017-07-16T16:29:48.260Z</updated>
    
    <content type="html"><![CDATA[<p>原因：var声明和变量提升（Hoisting）机制</p>
<hr>
<h1 id="块级声明"><a href="#块级声明" class="headerlink" title="块级声明"></a>块级声明</h1><p>块级声明用于声明在指定块之外无法访问的变量</p>
<p>块级作用域（词法作用域）：</p>
<ul>
<li>函数内部</li>
<li>块中{}</li>
</ul>
<h2 id="let声明（变量）"><a href="#let声明（变量）" class="headerlink" title="let声明（变量）"></a>let声明（变量）</h2><p>用let替代var来声明变量，可以把变量作用域限制在当前代码块中。由于let声明不会被提升，因此开发者通常使用let声明语句放在封闭代码块的顶部，一遍整个代码块都可以访问</p>
<h2 id="禁止重声明"><a href="#禁止重声明" class="headerlink" title="禁止重声明"></a>禁止重声明</h2><p>同一作用域中不能用let重复定义已经存在的标识符，否则会抛出错误。但如果当前作用域内嵌另一个作用域，便可在内嵌作用域中用let声明同名变量。</p>
<h2 id="const声明（常量）"><a href="#const声明（常量）" class="headerlink" title="const声明（常量）"></a>const声明（常量）</h2><ul>
<li>const和let声明的都是块级标识符</li>
<li>其值一旦被设定都不可更改（不可再次赋值）</li>
<li>每个通过const声明的常量必须进行初始化（赋值）</li>
<li><strong>和其他语言中常量不同的是：es6中如果常量是对象，则对象中的值可以修改（修改对象的属性值）</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const person = &#123;</div><div class="line">    name: &quot;Nicholas&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 可以修改对象属性的值</div><div class="line">person.name = &quot;Greg&quot;</div><div class="line"></div><div class="line">// 抛出语法错误</div><div class="line">person = &#123;</div><div class="line">    name： &quot;Greg&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>修改绑定的值不对报错，但直接给person赋值，既修改person的绑定，会抛出错误。<br><strong>const声明不允许修改绑定，但允许修改绑定的值</strong></p>
<h2 id="临时死区（Temporal-Dead-Zone-TDZ）"><a href="#临时死区（Temporal-Dead-Zone-TDZ）" class="headerlink" title="临时死区（Temporal Dead Zone/TDZ）"></a>临时死区（Temporal Dead Zone/TDZ）</h2><ul>
<li>临时死区（Temporal Dead Zone/TDZ），常被用来描述let和const的不提示效果</li>
<li>只用执行过变量声明语句后，变量才会从TDZ中移出，然后才能正常访问</li>
<li>但在let声明的作用域外对变量使用typeof则不会报错：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">console.log(typeof value)    // &quot;undefined&quot;</div><div class="line"></div><div class="line">if (condition) &#123;</div><div class="line">    let value = &quot;blue&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>typeof是在声明变量value的代码块外执行的，此时value并不在TDZ中。也就意味着不存在value这个绑定，typeof最终返回”undefined”</p>
<hr>
<h1 id="循环中的块作用域绑定"><a href="#循环中的块作用域绑定" class="headerlink" title="循环中的块作用域绑定"></a>循环中的块作用域绑定</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">for (let i=0; i&lt;10; i++) &#123;</div><div class="line">    prosess(items[i])</div><div class="line">&#125;</div><div class="line"></div><div class="line">// i在这里不可访问，抛出错误</div><div class="line">console.log(i)</div></pre></td></tr></table></figure>
<h2 id="循环中的函数"><a href="#循环中的函数" class="headerlink" title="循环中的函数"></a>循环中的函数</h2><ul>
<li>长久以来，var声明让开发者在循环中创建函数变得异常困难，因为变量倒了循环之外仍能访问。ES6中let和const提供的块级绑定让我们无需再这么折腾</li>
<li>开发者在循环中使用立即调用函数表达式（IIFE），以强制生成计数器变量的副本</li>
</ul>
<h2 id="循环中的let声明"><a href="#循环中的let声明" class="headerlink" title="循环中的let声明"></a>循环中的let声明</h2><ul>
<li>每次循环的时候let声明都会创建一个新变量i，并将其初始化为i的当前值</li>
<li><strong>let声明在循环内部的行为是标准中专门定义的，它不一定与let的不提升特性相关，理解这点至关重要</strong></li>
</ul>
<h2 id="循环中的const声明"><a href="#循环中的const声明" class="headerlink" title="循环中的const声明"></a>循环中的const声明</h2><ul>
<li>对应for循环，可以在初始化变量时使用const，但更改这个变量时就会抛出错误</li>
<li>在for-in和for-of循环中，因为在每次迭代不会修改已有绑定，而是创建一个新绑定，所以不会抛出错误</li>
</ul>
<hr>
<h1 id="全局块作用域绑定"><a href="#全局块作用域绑定" class="headerlink" title="全局块作用域绑定"></a>全局块作用域绑定</h1><ul>
<li>当var被用于全局作用域时，它会创建一个新的全局变量作为全局对象（浏览器环境中的window对象）的属性</li>
<li>如果不想为全局对象创建属性，使用let和const则安全得多</li>
<li>如果希望在全局对象下定义变量，仍然可以使用var。这种情况常见于在浏览器中跨frame或跨window访问</li>
</ul>
<hr>
<h1 id="块级绑定最佳实践的进化"><a href="#块级绑定最佳实践的进化" class="headerlink" title="块级绑定最佳实践的进化"></a>块级绑定最佳实践的进化</h1><p><strong>新的理念：</strong><br>默认使用const，只有确实需要改变变量的值时使用let。因为大部分变量的值在初始化后不应再改变，而预料之外的变量值的改变是很多bug的源头。（某种程度上实现代码的不可变，从而防止某些错误的产生）</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原因：var声明和变量提升（Hoisting）机制&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;块级声明&quot;&gt;&lt;a href=&quot;#块级声明&quot; class=&quot;headerlink&quot; title=&quot;块级声明&quot;&gt;&lt;/a&gt;块级声明&lt;/h1&gt;&lt;p&gt;块级声明用于声明在指定块之外无法访问的变量&lt;/p
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
      <category term="ECMAScript2015" scheme="http://yoursite.com/categories/JavaScript/ECMAScript2015/"/>
    
      <category term="《深入理解ES6》笔记" scheme="http://yoursite.com/categories/JavaScript/ECMAScript2015/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="ECMAScript2015" scheme="http://yoursite.com/tags/ECMAScript2015/"/>
    
      <category term="《深入理解ES6》笔记" scheme="http://yoursite.com/tags/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
